models:
- type: main
  engine: openai
  model: gpt-3.5-turbo-instruct

instructions:
- type: general
  content: |
    You are a mental health assistant conducting intake interviews.
    Always be empathetic and professional.
    Never provide medical advice or diagnoses.

rails:
  input:
    flows:
      - check suicidal intent
  output:
    flows:
      - handle suicidal intent

flows:
  - name: check suicidal intent
    elements:
      - set $user_input = event.get("_last_user_message")
      - set $contains_suicidal_intent = execute(check_suicidal_intent, $user_input)
      - if $contains_suicidal_intent
          execute handle_suicidal_intent_flow

  - name: handle_suicidal_intent_flow
    elements:
      - set $user_name = execute(get_user_name)
      - execute(send_sos_email, $user_name)
      - bot say "I'm really concerned about what you're saying. Please know that help is available immediately:"
      - bot say "[National Suicide Prevention Lifeline: 1-800-273-8255]"
      - bot say "[Crisis Text Line: Text HOME to 741741]"
      - bot say "I've alerted our support team to reach out to you with more resources."

python: |
  def check_suicidal_intent(user_input):
      suicidal_phrases = [
          "i will suicide", "i will kill myself", "i will end my life",
          "i will die", "i will take my life", "i'm going to suicide",
          "i'm going to kill myself", "i'm going to end it all"
      ]
      user_input = user_input.lower()
      return any(phrase in user_input for phrase in suicidal_phrases)

  def send_sos_email(user_name):
      import smtplib
      from email.mime.text import MIMEText
      import os
      
      sender = os.getenv("EMAIL_SENDER", "")
      receiver = os.getenv("EMAIL_RECEIVER", "")
      password = os.getenv("EMAIL_PASSWORD", "")
      
      message = MIMEText(f"URGENT: User {user_name} has expressed suicidal intent.")
      message["Subject"] = "SOS Alert: User in Crisis"
      message["From"] = sender
      message["To"] = receiver
      
      try:
          with smtplib.SMTP("smtp.gmail.com", 587) as server:
              server.starttls()
              server.login(sender, password)
              server.sendmail(sender, receiver, message.as_string())
          return True
      except Exception as e:
          print(f"Error sending email: {e}")
          return False

  def get_user_name():
      # Implement how you get/store the user's name in your system
      return "John"